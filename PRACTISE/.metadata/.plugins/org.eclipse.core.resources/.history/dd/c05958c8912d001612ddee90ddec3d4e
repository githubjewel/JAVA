package calculator;

import java.beans.Expression;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.Format;
import java.text.Normalizer.Form;
import java.util.Stack;

import javax.swing.text.html.HTMLEditorKit.Parser;

public class Calculator {

	
	public static void main(String[] args) throws IOException {
		
		System.out.print("Enter Expression : ");
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String expression = br.readLine().replaceAll("\\s","");	
        try{
        	System.out.println("Result: "+calc(expression));
        }catch(Exception e) {e.printStackTrace();}
	}
	
	public static int calc(String string){
	    int result=0; 
	    String numbers="0123456789";
	    String operations="+-/*";
	    for (int i=0;i<string.length();i++){
	        if (numbers.contains(string.charAt(i)+"")){
	            result=result*10+(Integer.parseInt(string.charAt(i)+""));
	            }
	        else {
	            if (string.charAt(i)=='+'){ result+=calc(string.substring(i+1));}
	            if (string.charAt(i)=='-'){ result-=calc(string.substring(i+1));}
	            if (string.charAt(i)=='*'){ result*=calc(string.substring(i+1));}
	            if (string.charAt(i)=='/'){ try{result/=calc(string.substring(i+1));}
	                catch (ArithmeticException e){
	                    System.err.println("You cannot devide by Zero!");}
	            }  
	            break;
	        }        
	    }
	    return result;
	}
	public static String evaluate(String expression){
		
		char[] tokens = expression.toCharArray();
		Stack<Double> values = new Stack<>();
		Stack<Character> operators = new Stack<>();
		
		for(int i=0; i<tokens.length; i++) {
			 
			  if((tokens[i]>='0' && tokens[i]<='9') || tokens[i]=='.'){
				  
				  StringBuffer buf = new StringBuffer();
				  
				  while((tokens[i]>='0' && tokens[i]<='9') || tokens[i]=='.'){
					  
					  buf.append(tokens[i]);
					  i++;
					  if(i==tokens.length) break;
				  }
				  values.push(Double.parseDouble(buf.toString()));
				  
			  
			  }
			  if(isOperator(tokens[i])){
				  
			      System.out.println("Operator...");
				  while(!operators.empty() && 
						  checkPrecedence(operators.peek(),tokens[i]))
					  values.push(doCalculation(values.pop(),
							  values.pop(),operators.pop()));
				  
				  		operators.push(tokens[i]);  		 
				  
			  }
			  
		}//end of for loop
		
          try{
		  while(!operators.empty())
			  values.push(doCalculation(values.pop(),
					                    values.pop(), 
					                    operators.pop()));
		  
          }catch(Exception e){e.printStackTrace();}
		
          System.out.println();
		return values.pop().toString();
	}
	
	public static double doCalculation(double a, double b, char operator){
		
		switch(operator){
		case '+':
            return a + b;
        case '-':
            return a - b;
        case '*':
            return a * b;
        case '/':
            if (b == 0)
                throw new
                UnsupportedOperationException("Cannot divide by zero");
            return a / b;

		
		}
		
		return 0;
	}
	
	public static boolean checkPrecedence(char stackChar,char inputchar){
		
		if(precedence(stackChar) >= precedence(inputchar))
			return true;
		
		return false;
	}

	public static boolean isOperator(char c){
		
		if (c == '+' || c == '-' ||  c == '*' || c == '/')
			return true;
		
		return false;
	}
	
	public static int precedence(char c){
		
		if(c == '*' || c == '/') return 2;
		if(c == '+' || c == '-') return 1;
		
		return 0;
	}
}
